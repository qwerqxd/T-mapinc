rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - If the user is signed in and the userId matches the authenticated user's ID.
     * @allow (get, update, delete) - If the user is signed in and the userId matches the authenticated user's ID.
     * @deny (create) - If the user is not signed in, or the userId does not match the authenticated user's ID.
     * @deny (get, update, delete) - If the user is not signed in, or the userId does not match the authenticated user's ID.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isSignedIn() && isOwner(userId);
      }
      function isCreatingOwner(userId) {
          return isSignedIn() && isOwner(userId);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isCreatingOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to map markers.
     * @path /markers/{markerId}
     * @allow (create) - If the user is signed in. The 'createdBy' field must match the authenticated user's ID.
     * @allow (get, list) - Public read access.
     * @allow (update, delete) - If the user is signed in and the 'createdBy' field in the existing document matches the authenticated user's ID.
     * @deny (create) - If the user is not signed in, or the 'createdBy' field does not match the authenticated user's ID.
     * @deny (update, delete) - If the user is not signed in, or the 'createdBy' field does not match the authenticated user's ID.
     * @principle Enforces document ownership for writes, allows public reads, and validates relational integrity on create.
     */
    match /markers/{markerId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner() {
        return resource.data.createdBy == request.auth.uid;
      }
      function isCreatingOwner() {
        return request.resource.data.createdBy == request.auth.uid;
      }
       function isExistingOwner() {
          return isSignedIn() && isOwner();
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isCreatingOwner();
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    /**
     * @description Controls access to reviews.
     * @path /reviews/{reviewId}
     * @allow (create) - If the user is signed in. The 'authorId' field must match the authenticated user's ID.
     * @allow (get, list) - Public read access.
     * @allow (update, delete) - If the user is signed in and the 'authorId' field in the existing document matches the authenticated user's ID.
     * @deny (create) - If the user is not signed in, or the 'authorId' field does not match the authenticated user's ID.
     * @deny (update, delete) - If the user is not signed in, or the 'authorId' does not match the authenticated user's ID.
     * @principle Enforces document ownership for writes, allows public reads, and validates relational integrity on create.
     */
    match /reviews/{reviewId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner() {
        return resource.data.authorId == request.auth.uid;
      }
      function isCreatingOwner() {
        return request.resource.data.authorId == request.auth.uid;
      }
      function isExistingOwner() {
          return isSignedIn() && isOwner();
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isCreatingOwner();
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }
  }
}