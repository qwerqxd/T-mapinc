/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and administrative override. Users own their profiles and reviews.
 * Administrative users (with the 'admin' role) can manage all data, including markers and reviews.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user and admins.
 * - /markers/{markerId}: Stores map markers, creatable by any authenticated user, but only modifiable by admins.
 * - /reviews/{reviewId}: Stores reviews for markers, creatable by any authenticated user, and modifiable by the author and admins.
 *
 * Key Security Decisions:
 * - User listing is disabled for privacy.
 * - Reviews can only be updated by the original author or an admin.
 * - Markers can only be created by signed-in users, and modified/deleted by admins.
 *
 * Denormalization for Authorization:
 * The `Review` entity includes `authorId`, which is used to quickly verify ownership for updates and deletes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an admin.
     */
    function isAdmin() {
      return request.auth.token.role == 'admin';
    }

    /**
     * @description Checks if the user is the existing owner of the resource.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User with uid 'user_abc' can create their own profile.
     * @allow (get) User with uid 'user_abc' can read their own profile. Admin can read any profile
     * @allow (update) User with uid 'user_abc' can update their own profile. Admin can update any profile
     * @allow (delete) User with uid 'user_abc' can delete their own profile. Admin can delete any profile
     * @deny (create) User with uid 'user_xyz' cannot create a profile with ID 'user_abc'.
     * @principle Enforces user-ownership and admin override for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Rules for the /markers/{markerId} collection.
     * @path /markers/{markerId}
     * @allow (create) Signed in user can create a marker.
     * @allow (get, list) Any user can read markers.
     * @allow (update, delete) Admin user can update/delete a marker.
     * @deny (update) Non-admin user cannot update a marker.
     * @principle Allows public read access, but restricts creation to signed-in users and modification to admins.
     */
    match /markers/{markerId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isAdmin();
    }

    /**
     * @description Rules for the /reviews/{reviewId} collection.
     * @path /reviews/{reviewId}
     * @allow (create) Signed in user can create a review.
     * @allow (get, list) Any user can read reviews.
     * @allow (update, delete) Author or admin user can update/delete the review.
     * @deny (update) Non-author and non-admin user cannot update a review.
     * @principle Allows public read access, restricts creation to signed-in users, and limits modification to the author or admin.
     */
    match /reviews/{reviewId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if (resource.data.authorId == request.auth.uid && resource != null) || isAdmin();
      allow delete: if (resource.data.authorId == request.auth.uid && resource != null) || isAdmin();
    }
  }
}