/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles. Markers and Reviews are publicly readable but only the creating user can modify or delete them.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /markers/{markerId}: Stores location markers.
 * - /reviews/{reviewId}: Stores reviews for markers.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Markers are publicly readable, but only the creator can modify or delete them. The `createdBy` field in the Marker document is used for this.
 * - Reviews are publicly readable, but only the author can modify or delete them. The `authorId` field in the Review document is used for this.
 * - Listing of users is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - Markers and Reviews both denormalize the creator's UID directly into the document (createdBy and authorId respectively). This allows for efficient ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile at /users/user_abc
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, and delete their profile at /users/user_abc
     * @deny (create) - User with UID 'user_abc' cannot create a profile at /users/user_xyz
     * @deny (get, update, delete) - User with UID 'user_abc' cannot read, update, or delete the profile at /users/user_xyz
     * @deny (list) - Prevents listing all user profiles.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId);
      }

      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Controls access to map markers. Markers are publicly readable, but only the creator can modify or delete them.
     * @path /databases/{database}/documents/markers/{markerId}
     * @allow (get, list) - Any user can read the marker data.
     * @allow (create) - User with UID 'user_abc' can create a marker with createdBy: 'user_abc'.
     * @allow (update, delete) - User with UID 'user_abc' can update/delete a marker if they created it (createdBy: 'user_abc').
     * @deny (create) - User with UID 'user_abc' cannot create a marker with createdBy: 'user_xyz'.
     * @deny (update, delete) - User with UID 'user_abc' cannot update/delete a marker created by user 'user_xyz'.
     * @principle Allows public read access while enforcing ownership for write access.
     */
    match /markers/{markerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return request.auth.uid == resource.data.createdBy;
      }

      function isExistingOwner() {
        return isOwner();
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner();
      allow delete: if isSignedIn() && isExistingOwner();
    }

    /**
     * @description Controls access to reviews. Reviews are publicly readable, but only the author can modify or delete them.
     * @path /databases/{database}/documents/reviews/{reviewId}
     * @allow (get, list) - Any user can read the review data.
     * @allow (create) - User with UID 'user_abc' can create a review with authorId: 'user_abc'.
     * @allow (update, delete) - User with UID 'user_abc' can update/delete a review if they authored it (authorId: 'user_abc').
     * @deny (create) - User with UID 'user_abc' cannot create a review with authorId: 'user_xyz'.
     * @deny (update, delete) - User with UID 'user_abc' cannot update/delete a review authored by user 'user_xyz'.
     * @principle Allows public read access while enforcing ownership for write access.
     */
    match /reviews/{reviewId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return request.auth.uid == resource.data.authorId;
      }

       function isExistingOwner() {
        return isOwner();
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner();
      allow delete: if isSignedIn() && isExistingOwner();
    }
  }
}