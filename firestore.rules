/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and markers. Reviews are also associated with an author, and only the author can update or delete them.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user themselves can read or write their profile.
 * - /markers/{markerId}: Stores map markers. Only the user who created the marker can update or delete it. Anyone can read markers.
 * - /reviews/{reviewId}: Stores reviews for markers. Only the author of the review can update or delete it. Anyone can read reviews.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents. Listing all users is disallowed.
 * - Markers are publicly readable, but only the creator can modify or delete them.
 * - Reviews are publicly readable, but only the author can modify or delete them.
 *
 * Denormalization for Authorization:
 * The `Review` entity includes an `authorId` field, which is used to authorize updates and deletes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile at /users/user123.
     * @allow (get, update, delete) - User with UID 'user123' can get, update, and delete their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, update, delete) - User with UID 'user456' cannot get, update, or delete the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to markers, but restricts creation, updates, and deletes to the marker's creator.
     * @path /markers/{markerId}
     * @allow (get, list) - Any user can read marker data.
     * @allow (create) - User with UID 'user123' can create a marker with createdBy: 'user123'.
     * @allow (update, delete) - User with UID 'user123' can update/delete a marker they created (createdBy: 'user123').
     * @deny (create) - User with UID 'user456' cannot create a marker with createdBy: 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot update/delete a marker created by 'user123'.
     * @principle Allows public reads with owner-only writes, enforcing ownership of markers.
     */
    match /markers/{markerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && resource.data.createdBy == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.createdBy == request.auth.uid;
    }

    /**
     * @description Allows public read access to reviews, but restricts updates and deletes to the review's author.
     * @path /reviews/{reviewId}
     * @allow (get, list) - Any user can read review data.
     * @allow (create) - User with UID 'user123' can create a review with authorId: 'user123'.
     * @allow (update, delete) - User with UID 'user123' can update/delete a review they authored (authorId: 'user123').
     * @deny (create) - User with UID 'user456' cannot create a review with authorId: 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot update/delete a review authored by 'user123'.
     * @principle Allows public reads with owner-only writes, enforcing ownership of reviews.
     */
    match /reviews/{reviewId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(authorId) {
        return isSignedIn() && request.auth.uid == authorId;
      }

      function isExistingOwner(authorId) {
        return isOwner(authorId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }
  }
}