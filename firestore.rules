/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and marker creation.
 * Reviews can be created by authenticated users, and updated/deleted only by the original author.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the user themselves.
 * - /markers/{markerId}: Stores map markers, creatable by any authenticated user.
 * - /reviews/{reviewId}: Stores reviews for markers, creatable by any authenticated user, and updatable/deletable by the author.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user profiles.
 * - Any authenticated user can create a marker.
 * - Any authenticated user can read markers and reviews
 * - Reviews are restricted to owner-only for updates and deletes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get, create, update, delete): If the user's UID matches the userId in the path.
     * @deny (get, create, update, delete): If the user's UID does not match the userId in the path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to marker documents.
     * @path /databases/{database}/documents/markers/{markerId}
     * @allow (get, list): Any authenticated user can read markers.
     * @allow (create): Any authenticated user can create a marker. The `createdBy` field must match the user's UID.
     * @allow (update, delete): Not allowed in this prototyping phase, add owner validation.
     * @deny (create): If the `createdBy` field does not match the user's UID.
     * @principle Allows public read access with owner-only writes (TODO: Implement owner validation for update/delete).
     */
    match /markers/{markerId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to review documents.
     * @path /databases/{database}/documents/reviews/{reviewId}
     * @allow (get, list): Any authenticated user can read reviews.
     * @allow (create): Any authenticated user can create a review. The `authorId` field must match the user's UID.
     * @allow (update, delete): Only the author of the review can update or delete it, and only if the document exists.
     * @deny (create): If the `authorId` field does not match the user's UID.
     * @deny (update, delete): If the user is not the author of the review or the document does not exist.
     * @principle Enforces document ownership for updates and deletes.
     */
    match /reviews/{reviewId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param userId The user ID to compare against the request's authentication UID.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
     /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param userId The user ID to compare against the resource's owner ID.
     * @return True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}