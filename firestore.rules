/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a combination of user-ownership and role-based access control.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves (self-creation, owner-only access).
 * - /markers/{markerId}: Stores map markers, publicly readable but writable only by the marker creator or admin.
 * - /reviews/{reviewId}: Stores reviews, writable only by the review author, marker creator, or admin; publicly readable.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Markers are publicly readable, but only the creator or admin can modify/delete them.
 * - Reviews are publicly readable, but only the author, marker creator, or admin can modify/delete them.
 * - The 'list' operation is allowed for all collections, assuming public readability or owner-based restrictions.
 *
 * Denormalization for Authorization:
 * - The Review entity contains `authorId` to simplify ownership checks for reviews.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles, allowing only the owner to manage their own data.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User with uid 'user123' can create their profile.
     * @allow (get) User with uid 'user123' can read their profile.
     * @allow (update) User with uid 'user123' can update their profile.
     * @allow (delete) User with uid 'user123' can delete their profile.
     * @deny (create) User with uid 'user456' cannot create a profile with ID 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && resource.data.uid == userId;
      allow delete: if isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Secure map markers, allowing public read access and owner-only or admin writes.
     * @path /databases/{database}/documents/markers/{markerId}
     * @allow (get) Any user can read marker data.
     * @allow (list) Any user can list marker data.
     * @allow (create) User with uid 'user123' can create a marker with createdBy 'user123'.
     * @allow (update) User with uid 'user123' can update a marker they created.
     * @allow (delete) User with uid 'admin' can delete any marker.
     * @deny (create) User with uid 'user456' cannot create a marker with createdBy 'user123'.
     * @principle Allows public reads but enforces ownership for writes, with admin override.
     */
    match /markers/{markerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isMarkerOwner(marker) {
          return isSignedIn() && request.auth.uid == marker.createdBy;
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if (isMarkerOwner(resource.data) || isAdmin()) && resource != null;
      allow delete: if (isMarkerOwner(resource.data) || isAdmin()) && resource != null;
    }

    /**
     * @description Secure reviews, allowing public read access and owner-only or admin writes.
     * @path /databases/{database}/documents/reviews/{reviewId}
     * @allow (get) Any user can read review data.
     * @allow (list) Any user can list review data.
     * @allow (create) User with uid 'user123' can create a review with authorId 'user123'.
     * @allow (update) User with uid 'user123' can update a review they authored.
     * @allow (delete) User with uid 'admin' can delete any review.
     * @principle Allows public reads but enforces ownership for writes, with admin override.
     */
    match /reviews/{reviewId} {
       function isSignedIn() {
          return request.auth != null;
        }

      function isReviewOwner(review) {
          return isSignedIn() && request.auth.uid == review.authorId;
      }

      function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if (isReviewOwner(resource.data) || isAdmin()) && resource != null;
      allow delete: if (isReviewOwner(resource.data) || isAdmin()) && resource != null;
    }
  }
}