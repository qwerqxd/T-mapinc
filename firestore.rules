/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and allows users to create, update, and delete their own reviews.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user can read or write their own profile.
 * - /markers/{markerId}: Stores map markers. Any authenticated user can create markers.
 * - /reviews/{reviewId}: Stores reviews for markers. Any authenticated user can create reviews, and only the author can update or delete them.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Markers are publicly readable, but only authenticated users can create them.
 * - Reviews are publicly readable, but writes are restricted to the author.
 *
 * Denormalization for Authorization:
 * - The 'Review' entity contains 'authorId', 'authorName', and 'authorAvatarUrl' to avoid needing to fetch user data for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create, update, delete, get, list) if the user is the owner of the profile.
     * @deny (create, update, delete, get, list) if the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure map markers. Any authenticated user can create markers, but only admins can update or delete them.
     * @path /markers/{markerId}
     * @allow (create) if the user is authenticated.
     * @allow (get, list) if true.
     * @deny (update, delete) always.
     * @principle Authenticated users can create markers, but only admins can modify them.
     */
    match /markers/{markerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Secure reviews. Any authenticated user can create reviews. Only the author can update or delete their own reviews.
     * @path /reviews/{reviewId}
     * @allow (create) if the user is authenticated and the authorId matches the user's ID.
     * @allow (get, list) if true.
     * @allow (update, delete) if the user is the author of the review.
     * @deny (update, delete) if the user is not the author of the review.
     * @principle Enforces document ownership for updates and deletes, allows public read access.
     */
    match /reviews/{reviewId} {
      function isOwner(authorId) {
        return request.auth != null && request.auth.uid == authorId;
      }

      function isExistingOwner(authorId) {
        return isOwner(authorId) && resource != null;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }
  }
}