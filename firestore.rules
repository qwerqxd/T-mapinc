/**
 * @file Firebase Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and markers,
 *              allowing users to create, read, update, and delete their own data. Reviews
 *              are publicly readable but only creators can modify them.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /markers/{markerId}: Stores map markers, created and managed by individual users.
 * - /reviews/{reviewId}: Stores reviews for markers, publicly readable, writeable only by the creator.
 *
 * Key Security Decisions:
 * - Users can only manage their own user profiles.
 * - Users can only manage the markers they create.
 * - Reviews are publicly readable.
 *
 * Denormalization for Authorization:
 * - Markers have a `createdBy` field that MUST match the user's UID for write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @deny (create) User with UID 'user456' cannot create a profile for 'user123'.
     * @allow (get) User with UID 'user123' can read their profile.
     * @deny (get) User with UID 'user456' cannot read 'user123's profile.
     * @allow (update) User with UID 'user123' can update their profile.
     * @deny (update) User with UID 'user456' cannot update 'user123's profile.
     * @allow (delete) User with UID 'user123' can delete their profile.
     * @deny (delete) User with UID 'user456' cannot delete 'user123's profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // isOwner checks if the uid matches the user id
      allow create: if isSignedIn() && isOwner(userId);
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to marker documents.
     * @path /markers/{markerId}
     * @allow (create) User with UID 'user123' can create a marker with createdBy: 'user123'.
     * @deny (create) User with UID 'user456' cannot create a marker with createdBy: 'user123'.
     * @allow (get) Any signed-in user can read any marker.
     * @deny (get) Not applicable.
     * @allow (update) User with UID 'user123' can update a marker they created.
     * @deny (update) User with UID 'user456' cannot update a marker created by 'user123'.
     * @allow (delete) User with UID 'user123' can delete a marker they created.
     * @deny (delete) User with UID 'user456' cannot delete a marker created by 'user123'.
     * @principle Enforces document ownership for write operations on markers, allows public reads.
     */
    match /markers/{markerId} {
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow get, list: if true;
      allow update: if isSignedIn() && isExistingOwner(resource.data.createdBy);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Controls access to review documents.
     * @path /reviews/{reviewId}
     * @allow (create) Any signed-in user can create a review.
     * @deny (create) Not applicable.
     * @allow (get) Any user can read any review.
     * @deny (get) Not applicable.
     * @allow (update) User with UID 'user123' can update a review they authored.
     * @deny (update) User with UID 'user456' cannot update a review authored by 'user123'.
     * @allow (delete) User with UID 'user123' can delete a review they authored.
     * @deny (delete) User with UID 'user456' cannot delete a review authored by 'user123'.
     * @principle Enforces ownership for update/delete operations on reviews, allows public reads and creates.
     */
    match /reviews/{reviewId} {
      allow create: if isSignedIn();
      allow get, list: if true;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    // ---- Helper functions ----

    // Returns true if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Returns true if the user is the owner of the document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Returns true if the user is the owner of the existing document.
    function isExistingOwner(userId) {
      return isSignedIn() && request.auth.uid == userId && resource != null;
    }
  }
}