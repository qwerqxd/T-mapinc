/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and marker creation.
 * Reviews are associated with both markers and authors.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /markers/{markerId}: Stores map markers.
 * - /reviews/{reviewId}: Stores reviews for markers.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Users can create markers, but updates/deletes are not yet restricted.
 * - Reviews can be created by authenticated users for any marker.
 * - Reviews can only be updated/deleted by their authors.
 * - Media is disabled.
 *
 * Denormalization for Authorization:
 * - Reviews denormalize authorId, authorName, and markerId to simplify ownership checks and listing reviews for a specific marker.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Users can only read and write their own data.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) - User with matching UID.
     * @deny (get, create, update, delete, list) - Any other user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure map markers. Users can create markers; update/delete are not yet restricted.
     * @path /markers/{markerId}
     * @allow (create) - Any authenticated user.
     * @allow (get, list) - Public read access.
     * @deny (update, delete) - No restrictions yet.
     * @principle Allows open reads and authenticated creates for markers.
     */
    match /markers/{markerId} {
        function isSignedIn() {
            return request.auth != null;
        }
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if false; // TODO: Implement update restrictions.
        allow delete: if false; // TODO: Implement delete restrictions.
    }

    /**
     * @description Secure reviews. Reviews can be created by authenticated users and updated/deleted only by their authors.
     * @path /reviews/{reviewId}
     * @allow (create) - Any authenticated user.
     * @allow (get, list) - Public read access.
     * @allow (update, delete) - Author of the review.
     * @deny (update, delete) - Any other user.
     * @principle Enforces document ownership for updates and deletes, allows public reads and authenticated creates.
     */
    match /reviews/{reviewId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow delete: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
    }
  }
}