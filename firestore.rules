/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and role-based access control.
 * Data validation is relaxed to facilitate rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /markers/{markerId}: Stores map markers. Any logged-in user can create a marker. Only the marker's creator can modify or delete it.
 * - /reviews/{reviewId}: Stores reviews for markers. Public read access. Only the author can modify or delete their reviews.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Listing of users is disallowed.
 * - Markers and reviews are publicly readable but have owner-only write access.
 *
 * Denormalization for Authorization:
 * - Markers have a `createdBy` field to enforce owner-only updates and deletes.
 * - Reviews have an `authorId` field to enforce owner-only updates and deletes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-only access to user profile data.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get, create, update, delete): If the authenticated user's UID matches the userId.
     * @deny (get, create, update, delete): If the authenticated user's UID does not match the userId.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow delete: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
    }

    /**
     * @description Allows public read access to markers, but restricts creation, updates, and deletions to the marker's creator.
     * @path /databases/{database}/documents/markers/{markerId}
     * @allow (get, list): Everyone can read markers.
     * @allow (create): Any signed-in user can create a marker, but must set createdBy to their own UID.
     * @allow (update, delete): Only the user who created the marker can update or delete it.
     * @deny (create): If request.resource.data.createdBy does not match request.auth.uid.
     * @deny (update, delete): If the authenticated user is not the creator of the marker.
     * @principle Public read, owner-only write with ownership validation.
     */
    match /markers/{markerId} {
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.createdBy);
      allow delete: if isSignedIn() && isOwner(resource.data.createdBy);
    }

    /**
     * @description Allows public read access to reviews, but restricts creation, updates, and deletions to the review's author.
     * @path /databases/{database}/documents/reviews/{reviewId}
     * @allow (get, list): Everyone can read reviews.
     * @allow (create): Any signed-in user can create a review, but must set authorId to their own UID.
     * @allow (update, delete): Only the author of the review can update or delete it.
     * @deny (create): If request.resource.data.authorId does not match request.auth.uid.
     * @deny (update, delete): If the authenticated user is not the author of the review.
     * @principle Public read, owner-only write with ownership validation.
     */
    match /reviews/{reviewId} {
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isOwner(resource.data.authorId);
    }
  }
}