/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles. Markers and Reviews are publicly readable,
 * but creating, updating, and deleting them is restricted to the creator. The data model assumes that `createdBy` and `authorId` fields
 * are correctly populated by the client to indicate the creator/author of a resource.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the owning user.
 * - /markers/{markerId}: Stores location markers, publicly readable, but writable only by the creator.
 * - /reviews/{reviewId}: Stores reviews for markers, publicly readable, but writable only by the author.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Listing of user documents is disallowed.
 * - Markers and Reviews are publicly readable to facilitate discovery and exploration.
 * - Markers and Reviews can only be created, updated, or deleted by their creator.
 *
 * Denormalization for Authorization:
 * - The `Marker` entity MUST include a `createdBy` field to identify the creator.
 * - The `Review` entity MUST include an `authorId` field to identify the author.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @deny (create) User with UID 'user456' cannot create a profile with ID 'user123'.
     * @allow (get) User with UID 'user123' can read their profile.
     * @deny (get) User with UID 'user456' cannot read the profile of 'user123'.
     * @allow (update) User with UID 'user123' can update their profile.
     * @deny (update) User with UID 'user456' cannot update the profile of 'user123'.
     * @allow (delete) User with UID 'user123' can delete their profile.
     * @deny (delete) User with UID 'user456' cannot delete the profile of 'user123'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to map markers.
     * @path /databases/{database}/documents/markers/{markerId}
     * @allow (get, list) Any user can read or list markers.
     * @allow (create) User with UID 'user123' can create a marker with createdBy 'user123'.
     * @deny (create) User with UID 'user456' cannot create a marker with createdBy 'user123'.
     * @allow (update) User with UID 'user123' can update a marker they created.
     * @deny (update) User with UID 'user456' cannot update a marker created by 'user123'.
     * @allow (delete) User with UID 'user123' can delete a marker they created.
     * @deny (delete) User with UID 'user456' cannot delete a marker created by 'user123'.
     * @principle Allows public reads but enforces ownership for writes.
     */
    match /markers/{markerId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.createdBy);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Controls access to reviews for markers.
     * @path /databases/{database}/documents/reviews/{reviewId}
     * @allow (get, list) Any user can read or list reviews.
     * @allow (create) User with UID 'user123' can create a review with authorId 'user123'.
     * @deny (create) User with UID 'user456' cannot create a review with authorId 'user123'.
     * @allow (update) User with UID 'user123' can update a review they authored.
     * @deny (update) User with UID 'user456' cannot update a review authored by 'user123'.
     * @allow (delete) User with UID 'user123' can delete a review they authored.
     * @deny (delete) User with UID 'user456' cannot delete a review authored by 'user123'.
     * @principle Allows public reads but enforces ownership for writes.
     */
    match /reviews/{reviewId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.authorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the resource.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the user is the owner of the existing resource.
  function isExistingOwner(ownerId) {
    return isSignedIn() && request.auth.uid == ownerId && resource != null;
  }
}