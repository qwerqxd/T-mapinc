rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profile information.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the resource.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow a user to read their own profile
      allow get: if isOwner(userId);
      allow list: if false;

      // Allow a user to create their own profile if the userId matches their auth id.
      allow create: if request.auth != null && request.auth.uid == userId;

      // Allow a user to update their own profile. Enforce immutability of the uid field.
      allow update: if isOwner(userId);

      // Allow a user to delete their own profile.
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages access to map markers.
     */
    match /markers/{markerId} {
      // Anyone can read markers
      allow get, list: if true;

      // Only signed-in users can create markers, and the createdBy field must match their UID.
      allow create: if request.auth != null;

      // No one can update or delete markers
      allow update, delete: if false;
    }

    /**
     * @description Manages access to reviews.
     */
    match /reviews/{reviewId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the author of the review.
      function isAuthor(authorId) {
        return request.auth != null && request.auth.uid == authorId;
      }

      // Anyone can read reviews
      allow get, list: if true;

      // Only signed-in users can create reviews, and the authorId must match their UID.
      allow create: if request.auth != null;

      // Only the author can update the review, and the authorId cannot be changed.
      allow update: if request.auth != null && request.auth.uid == resource.data.authorId;

      // Only the author can delete the review.
      allow delete: if request.auth != null && request.auth.uid == resource.data.authorId;
    }
  }
}